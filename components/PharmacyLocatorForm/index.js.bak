/**
*
* PharmacyLocatorForm
*
*/

import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { compose } from 'redux';
import { FormattedMessage, injectIntl, intlShape } from 'react-intl';
import { Field, reduxForm, formValueSelector } from 'redux-form/immutable';
import PlacesAutocomplete from 'react-places-autocomplete';
import TextFieldGroup from '../../components/TextFieldGroup';
import IndicatesField from '../IndicatesField';
import messages from './messages';
import { validate } from './validate';
import Button from '../Button';
import StateDropdown from '../StateDropdown';
import FormStyles from './form-styles';
class PharmacyLocatorForm extends React.Component { // eslint-disable-line react/prefer-stateless-function
  constructor(props) {
    super(props);
    this.state = {
      errors: false,
      value: '',
      address: '',
    };
  }
  handleChange(address) {
    this.setState({ address });
  }
  render() {
    const { handleSubmit, pristine, reset, submitting, intl } = this.props;
    const inputProps = {
      value: this.state.address,
      onChange: this.handleChange,
      onBlur: () => {
        console.log('blur!');
      },
      type: 'search',
      placeholder: 'Search Places...',
      autoFocus: true,
    };
    const AutocompleteItem = ({ formattedSuggestion }) => (
      <div>
        <strong>{ formattedSuggestion.mainText }</strong>{' '}
        <small>{ formattedSuggestion.secondaryText }</small>
      </div>
    );
    const cssClasses = {
      root: 'form-group',
      input: 'form-control',
      autocompleteContainer: 'my-autocomplete-container',
    };
    return (
      <FormStyles onSubmit={handleSubmit} className="form-horizontal" id="pharmacyLocatorForm" name="pharmacyLocatorForm">
        <div className="form-group">
          <IndicatesField className="help-block required required-indicate"><FormattedMessage {...messages.fieldRequired} /></IndicatesField>
        </div>
        <PlacesAutocomplete
          inputProps={inputProps}
          autocompleteItem={AutocompleteItem}
          classNames={cssClasses}
        />
        <div className="form-group">
          <label htmlFor="pharmacyName" className="control-label"><FormattedMessage {...messages.pharmacyName} />:</label>
          <Field name="pharmacyName" id="pharmacyName" label={intl.formatMessage(messages.pharmacyName)} placeholder={intl.formatMessage(messages.pharmacyName)} component={TextFieldGroup} type="input" classname="form-control" />
        </div>
        <div className="form-group">
          <label htmlFor="pharmacyAddress" className="control-label"><FormattedMessage {...messages.pharmacyAddress} />:</label>
          <Field name="pharmacyAddress" id="pharmacyAddress" label={intl.formatMessage(messages.pharmacyAddress)} placeholder={intl.formatMessage(messages.pharmacyAddress)} component={TextFieldGroup} type="input" classname="form-control" />
        </div>
        <div className="form-group">
          <label htmlFor="pharmacyCity" className="control-label"><FormattedMessage {...messages.pharmacyCity} />:</label>
          <Field name="pharmacyCity" id="pharmacyCity" label={intl.formatMessage(messages.pharmacyCity)} placeholder={intl.formatMessage(messages.pharmacyCity)} component={TextFieldGroup} type="input" classname="form-control" />
        </div>
        <div className="form-group">
          <label htmlFor="pharmacyState" className="control-label"><FormattedMessage {...messages.pharmacyState} />:</label>
          <StateDropdown name="pharmacyState" id="pharmacyState" />
        </div>
        <div className="form-group">
          <label htmlFor="pharmacyZip" className="control-label"><FormattedMessage {...messages.pharmacyZip} />:</label>
          <Field name="pharmacyZip" id="pharmacyZip" label={intl.formatMessage(messages.pharmacyZip)} placeholder={intl.formatMessage(messages.pharmacyZip)} component={TextFieldGroup} type="input" classname="form-control" />
        </div>
        <div className="form-group">
          <label htmlFor="pharmacyDistance" className="control-label"><FormattedMessage {...messages.pharmacyDistance} />:</label>
          <Field name="pharmacyDistance" id="pharmacyDistance" component="select" type="select" className="form-control" required="true" >
            <option value="5" defaultValue>5</option>
            <option value="10">10</option>
            <option value="25">25</option>
            <option value="50">50</option>
          </Field>
        </div>
        <div className="form-group">
          <div className="other-info-label"><FormattedMessage {...messages.pharmacyOtherInfo} />:</div>
          <div className="col-sm-6">
            <div className="checkbox">
              <label htmlFor="open24hrs">
                <Field name="open24hrs" id="open24hrs" component="input" type="checkbox" value="24 Hours" />
                24 Hours
              </label>
            </div>
            <div className="checkbox">
              <label htmlFor="indianHealth">
                <Field component="input" type="checkbox" name="indianHealth" id="indianHealth" value="Indian Health Services" />
              Indian Health Services</label>
            </div>
            <div className="checkbox">
              <label htmlFor="delivery">
                <Field component="input" type="checkbox" name="delivery" id="delivery" value="Delivery" />
              Delivery</label>
            </div>
            <div className="checkbox">
              <label htmlFor="homeInfusion">
                <Field component="input" type="checkbox" name="homeInfusion" id="homeInfusion" value="IV Infusion" />
              IV Infusion</label>
            </div>
            <div className="checkbox">
              <label htmlFor="driveThru">
                <Field component="input" type="checkbox" name="driveThru" id="driveThru" value="Drive Thru" />
              Drive Thru</label>
            </div>
          </div>
          <div className="col-sm-6">
            <div className="checkbox">
              <label htmlFor="longTermCare">
                <Field component="input" type="checkbox" name="longTermCare" id="longTermCare" value="Long Term Care" className="" aria-invalid="false" />
             Long Term Care</label>
            </div>

            <div className="checkbox">
              <label htmlFor="eprescriptions">
                <Field component="input" type="checkbox" name="eprescriptions" id="eprescriptions" value="Electronic Prescribing Enabled" className="" aria-invalid="false" />
             Electronic Prescribing Enabled</label>
            </div>
            <div className="checkbox">
              <label htmlFor="mailOrder">
                <Field component="input" type="checkbox" name="mailOrder" id="mailOrder" value="Mail Order" className="" aria-invalid="false" />
             Mail Order</label>
            </div>

            <div className="checkbox">
              <label htmlFor="extendedDay">
                <Field component="input" type="checkbox" name="extendedDay" id="extendedDay" value="Extended Day Supply" className="" aria-invalid="false" />
             Extended Day Supply</label>

            </div>
            <div className="checkbox">
              <label htmlFor="retail">
                <Field component="input" type="checkbox" name="retail" id="retail" value="Retail" className="" aria-invalid="false" />
             Retail</label>

            </div>
          </div>
        </div>
        <div className="form-group">
          <Button type="submit" btnStyle="btn-primary submit-btn" btnText="Submit" disabled={this.state.errors || pristine || submitting} />
          <Button type="button" btnStyle="btn-link clear-btn" btnText="Clear" disabled={pristine || submitting} onClick={reset} />
        </div>
      </FormStyles>
    );
  }
}

PharmacyLocatorForm.propTypes = {
  handleSubmit: PropTypes.func.isRequired,
  pristine: PropTypes.bool,
  reset: PropTypes.func,
  submitting: PropTypes.bool,
  intl: intlShape.isRequired,
};
PharmacyLocatorForm.defaultProps = {
  pristine: PropTypes.bool,
  reset: PropTypes.func,
  submitting: PropTypes.bool,
  invalid: PropTypes.bool,
};
const selector = formValueSelector('pharmacyLocatorForm'); // <-- same as form name
const reduxformWrapper = reduxForm({ form: 'pharmacyLocatorForm', validate });
const connectWrapper = connect((state) => ({ selectedReason: selector(state, 'pharmacyName') }));
export default injectIntl(compose(reduxformWrapper, connectWrapper)(PharmacyLocatorForm));
